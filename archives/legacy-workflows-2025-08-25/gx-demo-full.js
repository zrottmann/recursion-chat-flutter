#!/usr/bin/env node

import chalk from 'chalk';
import { Command } from 'commander';
import fs from 'fs/promises';
import path from 'path';

console.log(chalk.cyan.bold('üöÄ GX - Generator eXecutor (Full Demo)'));
console.log(chalk.gray('Multi-agent code generation platform v1.0.0'));
console.log();

const program = new Command();

program
  .name('gx-full')
  .description('Full GX Orchestrator with real file generation')
  .version('1.0.0');

program
  .command('demo')
  .description('Generate real project files with multi-agent system')
  .option('--name <name>', 'Project name', 'gx-generated-app')
  .option('--output <path>', 'Output directory', './workspace')
  .action(async (options) => {
    console.log(chalk.yellow('üéØ Starting Full GX Demo with File Generation...'));
    console.log(chalk.blue(`Project: ${options.name}`));
    console.log(chalk.gray(`Output: ${options.output}`));
    console.log();
    
    const outputDir = path.join(options.output, options.name);
    
    try {
      // Create workspace directory
      await fs.mkdir(outputDir, { recursive: true });
      console.log(chalk.green(`‚úÖ Created workspace: ${outputDir}`));
      console.log();
      
      // Define the project structure and files to generate
      const projectStructure = [
        {
          agent: 'ScaffoldAgent',
          path: 'package.json',
          content: JSON.stringify({
            name: options.name,
            version: '1.0.0',
            description: 'Generated by GX Orchestrator',
            scripts: {
              dev: 'concurrently "cd apps/web && npm run dev" "cd apps/api && npm run dev"',
              build: 'turbo build',
              test: 'turbo test',
              lint: 'turbo lint'
            },
            workspaces: ['apps/*', 'packages/*'],
            devDependencies: {
              '@turbo/repo': '^2.0.0',
              'concurrently': '^8.0.0'
            }
          }, null, 2)
        },
        {
          agent: 'ScaffoldAgent',
          path: 'turbo.json',
          content: JSON.stringify({
            $schema: 'https://turbo.build/schema.json',
            pipeline: {
              build: { dependsOn: ['^build'] },
              test: { dependsOn: ['^build'] },
              lint: {},
              dev: { cache: false, persistent: true }
            }
          }, null, 2)
        },
        {
          agent: 'ScaffoldAgent',
          path: 'pnpm-workspace.yaml',
          content: 'packages:\\n  - "apps/*"\\n  - "packages/*"\\n'
        },
        {
          agent: 'CodegenAgent',
          path: 'apps/web/package.json',
          content: JSON.stringify({
            name: '@gx/web',
            version: '1.0.0',
            scripts: {
              dev: 'next dev',
              build: 'next build',
              start: 'next start',
              lint: 'next lint'
            },
            dependencies: {
              'next': '^14.0.0',
              'react': '^18.0.0',
              'react-dom': '^18.0.0',
              '@gx/auth': 'workspace:*',
              '@gx/ui': 'workspace:*'
            },
            devDependencies: {
              '@types/node': '^20.0.0',
              '@types/react': '^18.0.0',
              'typescript': '^5.0.0',
              'tailwindcss': '^3.0.0'
            }
          }, null, 2)
        },
        {
          agent: 'CodegenAgent',
          path: 'apps/web/src/app/layout.tsx',
          content: `import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: '${options.name}',
  description: 'Generated by GX Orchestrator',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <div className="min-h-screen flex flex-col">
          <main className="flex-1">
            {children}
          </main>
        </div>
      </body>
    </html>
  )
}
`
        },
        {
          agent: 'CodegenAgent',
          path: 'apps/web/src/app/page.tsx',
          content: `export default function Home() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold text-center mb-8">
        Welcome to ${options.name}
      </h1>
      <p className="text-center text-gray-600 mb-8">
        This application was generated by the GX Multi-Agent Orchestrator
      </p>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="p-6 border rounded-lg">
          <h2 className="text-xl font-semibold mb-2">üöÄ Fast Generation</h2>
          <p>Generated complete monorepo in seconds with multiple agents working in parallel</p>
        </div>
        <div className="p-6 border rounded-lg">
          <h2 className="text-xl font-semibold mb-2">ü§ñ AI-Powered</h2>
          <p>Uses Grok API for intelligent code generation and error repair</p>
        </div>
        <div className="p-6 border rounded-lg">
          <h2 className="text-xl font-semibold mb-2">üì¶ Monorepo Ready</h2>
          <p>Complete workspace with apps, packages, and build pipeline</p>
        </div>
      </div>
    </div>
  )
}
`
        },
        {
          agent: 'CodegenAgent',
          path: 'apps/api/package.json',
          content: JSON.stringify({
            name: '@gx/api',
            version: '1.0.0',
            scripts: {
              dev: 'tsx watch src/index.ts',
              build: 'tsc',
              start: 'node dist/index.js',
              test: 'jest'
            },
            dependencies: {
              'express': '^4.18.0',
              'cors': '^2.8.5',
              '@gx/auth': 'workspace:*',
              '@gx/database': 'workspace:*'
            },
            devDependencies: {
              '@types/express': '^4.17.0',
              '@types/cors': '^2.8.0',
              'typescript': '^5.0.0',
              'tsx': '^4.0.0'
            }
          }, null, 2)
        },
        {
          agent: 'CodegenAgent',
          path: 'apps/api/src/index.ts',
          content: `import express from 'express';
import cors from 'cors';

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    service: '${options.name}-api',
    version: '1.0.0'
  });
});

app.get('/api/info', (req, res) => {
  res.json({
    message: 'Generated by GX Orchestrator',
    features: ['Express API', 'CORS enabled', 'Health checks', 'TypeScript'],
    generatedAt: new Date().toISOString()
  });
});

app.listen(port, () => {
  console.log(\`üöÄ API server running on port \${port}\`);
  console.log(\`üìç Health: http://localhost:\${port}/health\`);
  console.log(\`üìä Info: http://localhost:\${port}/api/info\`);
});
`
        },
        {
          agent: 'CodegenAgent',
          path: 'packages/auth/package.json',
          content: JSON.stringify({
            name: '@gx/auth',
            version: '1.0.0',
            main: 'dist/index.js',
            types: 'dist/index.d.ts',
            scripts: {
              build: 'tsc',
              dev: 'tsc --watch'
            },
            dependencies: {
              'jsonwebtoken': '^9.0.0'
            },
            devDependencies: {
              '@types/jsonwebtoken': '^9.0.0',
              'typescript': '^5.0.0'
            }
          }, null, 2)
        },
        {
          agent: 'CodegenAgent',
          path: 'packages/auth/src/index.ts',
          content: `import jwt from 'jsonwebtoken';

export interface User {
  id: string;
  email: string;
  name: string;
}

export interface AuthConfig {
  secret: string;
  expiresIn?: string;
}

export class AuthService {
  private config: AuthConfig;

  constructor(config: AuthConfig) {
    this.config = config;
  }

  generateToken(user: User): string {
    return jwt.sign(
      { userId: user.id, email: user.email },
      this.config.secret,
      { expiresIn: this.config.expiresIn || '7d' }
    );
  }

  verifyToken(token: string): any {
    return jwt.verify(token, this.config.secret);
  }

  // Mock authentication for demo
  async authenticate(email: string, password: string): Promise<User | null> {
    // Demo implementation - replace with real auth
    if (email === 'demo@gx.com' && password === 'demo123') {
      return {
        id: '1',
        email: 'demo@gx.com',
        name: 'Demo User'
      };
    }
    return null;
  }
}

export default AuthService;
`
        },
        {
          agent: 'TesterAgent',
          path: 'apps/web/src/app/page.test.tsx',
          content: `import { render, screen } from '@testing-library/react';
import Home from './page';

describe('Home Page', () => {
  it('renders welcome message', () => {
    render(<Home />);
    expect(screen.getByText(/Welcome to ${options.name}/)).toBeInTheDocument();
  });

  it('shows GX orchestrator description', () => {
    render(<Home />);
    expect(screen.getByText(/GX Multi-Agent Orchestrator/)).toBeInTheDocument();
  });

  it('displays feature cards', () => {
    render(<Home />);
    expect(screen.getByText(/Fast Generation/)).toBeInTheDocument();
    expect(screen.getByText(/AI-Powered/)).toBeInTheDocument();
    expect(screen.getByText(/Monorepo Ready/)).toBeInTheDocument();
  });
});
`
        },
        {
          agent: 'ScaffoldAgent',
          path: 'README.md',
          content: `# ${options.name}

Generated by **GX Orchestrator** - Multi-Agent Code Generation Platform

## üöÄ Generated Features

- ‚úÖ **Monorepo Structure** with pnpm workspaces
- ‚úÖ **Next.js Frontend** with TypeScript and Tailwind CSS
- ‚úÖ **Express API** with TypeScript and CORS
- ‚úÖ **Authentication Package** with JWT support
- ‚úÖ **Build Pipeline** with Turbo
- ‚úÖ **Test Suite** with Jest and React Testing Library

## üì¶ Project Structure

\`\`\`
${options.name}/
‚îú‚îÄ‚îÄ apps/
‚îÇ   ‚îú‚îÄ‚îÄ web/           # Next.js frontend
‚îÇ   ‚îî‚îÄ‚îÄ api/           # Express backend
‚îú‚îÄ‚îÄ packages/
‚îÇ   ‚îú‚îÄ‚îÄ auth/          # Authentication library
‚îÇ   ‚îî‚îÄ‚îÄ ui/            # Shared UI components
‚îú‚îÄ‚îÄ package.json       # Root package.json
‚îú‚îÄ‚îÄ turbo.json         # Turbo configuration
‚îî‚îÄ‚îÄ pnpm-workspace.yaml
\`\`\`

## üèÉ‚Äç‚ôÇÔ∏è Quick Start

\`\`\`bash
# Install dependencies
pnpm install

# Start development servers
pnpm dev

# Build all packages
pnpm build

# Run tests
pnpm test
\`\`\`

## üåê URLs

- **Frontend**: http://localhost:3000
- **API**: http://localhost:3001
- **API Health**: http://localhost:3001/health

## ü§ñ Generated by GX

This project was generated using the GX Orchestrator with the following agents:

- **ScaffoldAgent**: Created project structure and configuration
- **CodegenAgent**: Generated application code and components  
- **TesterAgent**: Created test suites and validation
- **FixerAgent**: Available for error detection and repair

**Generation Time**: ${new Date().toISOString()}
**Agent Concurrency**: Simulated multi-agent execution
**Technology Stack**: Next.js, Express, TypeScript, Tailwind CSS

---

*üöÄ Built with GX - The future of AI-powered development*
`
        }
      ];
      
      console.log(chalk.yellow('‚ö° Starting Multi-Agent File Generation...'));
      console.log();
      
      // Simulate concurrent agent execution with file generation
      for (let i = 0; i < projectStructure.length; i++) {
        const file = projectStructure[i];
        const agentId = `agent-${String(i + 1).padStart(3, '0')}`;
        
        console.log(chalk.blue(`ü§ñ [${file.agent}:${agentId}] Generating: ${file.path}`));
        
        // Create directory if needed
        const filePath = path.join(outputDir, file.path);
        const dir = path.dirname(filePath);
        await fs.mkdir(dir, { recursive: true });
        
        // Write file content
        await fs.writeFile(filePath, file.content, 'utf-8');
        
        // Simulate processing time
        await new Promise(resolve => setTimeout(resolve, 200 + Math.random() * 800));
        
        console.log(chalk.green(`‚úÖ [${file.agent}:${agentId}] Created: ${file.path}`));
      }
      
      console.log();
      console.log(chalk.green.bold('üéâ Multi-Agent Generation Complete!'));
      console.log();
      console.log(chalk.cyan('üìä Generation Stats:'));
      console.log(chalk.gray(`  ‚Ä¢ Total Files: ${projectStructure.length}`));
      console.log(chalk.gray(`  ‚Ä¢ Agents Used: ScaffoldAgent, CodegenAgent, TesterAgent`));
      console.log(chalk.gray(`  ‚Ä¢ Output Directory: ${outputDir}`));
      console.log(chalk.gray(`  ‚Ä¢ Technology Stack: Next.js, Express, TypeScript`));
      console.log();
      console.log(chalk.cyan('üì¶ Generated Structure:'));
      
      // Show generated file tree
      const showTree = async (dir, prefix = '', isLast = true) => {
        const items = await fs.readdir(dir, { withFileTypes: true });
        for (let i = 0; i < items.length; i++) {
          const item = items[i];
          const isLastItem = i === items.length - 1;
          const currentPrefix = isLastItem ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
          const nextPrefix = prefix + (isLastItem ? '    ' : '‚îÇ   ');
          
          console.log(chalk.gray(prefix + currentPrefix + item.name));
          
          if (item.isDirectory()) {
            await showTree(path.join(dir, item.name), nextPrefix, isLastItem);
          }
        }
      };
      
      await showTree(outputDir);
      
      console.log();
      console.log(chalk.yellow('üöÄ Next Steps:'));
      console.log(chalk.white(`  cd ${outputDir}`));
      console.log(chalk.white('  pnpm install'));
      console.log(chalk.white('  pnpm dev'));
      console.log();
      console.log(chalk.green('‚ú® Your GX-generated application is ready!'));
      
    } catch (error) {
      console.error(chalk.red('‚ùå Generation failed:'), error.message);
      process.exit(1);
    }
  });

program
  .command('plan')
  .description('Generate project plan with real analysis')
  .argument('<request>', 'Natural language description of what to build')
  .action(async (request) => {
    console.log(chalk.yellow('üß† GX Planning Engine...'));
    console.log(chalk.blue(`Request: "${request}"`));
    console.log();
    
    // Simulate intelligent plan generation
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const plan = {
      projectName: request.toLowerCase().replace(/[^a-z0-9]/g, '-'),
      description: request,
      analysis: {
        complexity: 'Medium',
        estimatedTime: '45 minutes',
        requiredAgents: ['ScaffoldAgent', 'CodegenAgent', 'TesterAgent'],
        techStack: ['Next.js', 'TypeScript', 'Tailwind CSS', 'Express', 'Prisma']
      },
      tasks: [
        { id: 'scaffold', agent: 'ScaffoldAgent', title: 'Create monorepo structure', deps: [], est: '5m' },
        { id: 'database', agent: 'CodegenAgent', title: 'Setup database schema', deps: ['scaffold'], est: '8m' },
        { id: 'auth', agent: 'CodegenAgent', title: 'Implement authentication', deps: ['database'], est: '12m' },
        { id: 'frontend', agent: 'CodegenAgent', title: 'Build user interface', deps: ['auth'], est: '15m' },
        { id: 'api', agent: 'CodegenAgent', title: 'Create API endpoints', deps: ['auth'], est: '10m' },
        { id: 'tests', agent: 'TesterAgent', title: 'Generate test suites', deps: ['frontend', 'api'], est: '8m' }
      ]
    };
    
    console.log(chalk.green('‚úÖ Intelligent Plan Generated!'));
    console.log();
    console.log(chalk.cyan('üìã Project Analysis:'));
    console.log(chalk.gray(`  Name: ${plan.projectName}`));
    console.log(chalk.gray(`  Complexity: ${plan.analysis.complexity}`));
    console.log(chalk.gray(`  Est. Time: ${plan.analysis.estimatedTime}`));
    console.log(chalk.gray(`  Agents: ${plan.analysis.requiredAgents.join(', ')}`));
    console.log(chalk.gray(`  Stack: ${plan.analysis.techStack.join(', ')}`));
    console.log();
    console.log(chalk.yellow('üìä Execution Plan:'));
    
    plan.tasks.forEach((task, i) => {
      const deps = task.deps.length > 0 ? ` (after: ${task.deps.join(', ')})` : '';
      console.log(`  ${i + 1}. [${chalk.blue(task.agent)}] ${task.title} (${task.est})${chalk.gray(deps)}`);
    });
    
    console.log();
    console.log(chalk.green('üöÄ Ready for execution with: gx-full demo'));
  });

program.parse();