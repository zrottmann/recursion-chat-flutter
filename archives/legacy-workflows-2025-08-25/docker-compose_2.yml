version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: tradingpost_postgres
    environment:
      POSTGRES_DB: tradingpost
      POSTGRES_USER: tradingpost
      POSTGRES_PASSWORD: tradingpost123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradingpost"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: tradingpost_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tradingpost_backend
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://tradingpost:tradingpost123@postgres:5432/tradingpost
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    ports:
      - "${BACKEND_PORT:-3002}:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 3002 --reload
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: tradingpost_frontend
    env_file:
      - .env
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:${BACKEND_PORT:-3002}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    command: npm run dev
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: tradingpost_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: tradingpost_tunnel
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN}
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: tradingpost_network