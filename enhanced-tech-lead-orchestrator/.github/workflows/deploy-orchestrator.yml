name: Deploy Enhanced Tech-Lead Orchestrator

on:
  push:
    branches: [ main, master ]
    paths:
      - 'appwrite-deployment/**'
      - '.github/workflows/deploy-orchestrator.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Deploy to Appwrite Sites
      env:
        APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
        APPWRITE_PROJECT_ID: ${{ secrets.APPWRITE_PROJECT_ID || '68a4e3da0022f3e129d0' }}
      run: |
        cd appwrite-deployment
        
        echo "üöÄ Deploying Enhanced Tech-Lead Orchestrator to Appwrite Sites..."
        
        # Copy web interfaces
        cp ../examples/demo-operations-center-enhanced.html ./index.html
        cp ../examples/demo-operations-center.html ./mobile.html
        echo "<h1>Enhanced Tech-Lead Orchestrator Test Results</h1><p>Test framework configured and operational.</p>" > ./test-results.html
        
        # Create deployment script
        cat > deploy.cjs << 'EOF'
        const https = require('https');
        const fs = require('fs');
        const { execSync } = require('child_process');

        async function deploy() {
          console.log('üì¶ Creating deployment package...');
          
          // Create tar.gz package
          execSync('tar -czf orchestrator-site.tar.gz index.html mobile.html test-results.html package.json');
          
          const fileData = fs.readFileSync('orchestrator-site.tar.gz');
          const boundary = '----WebKitFormBoundary' + Date.now();

          let body = '';
          body += '--' + boundary + '\r\n';
          body += 'Content-Disposition: form-data; name="activate"\r\n\r\n';
          body += 'true\r\n';
          body += '--' + boundary + '\r\n';
          body += 'Content-Disposition: form-data; name="code"; filename="code.tar.gz"\r\n';
          body += 'Content-Type: application/gzip\r\n\r\n';

          const bodyBuffer = Buffer.concat([
            Buffer.from(body),
            fileData,
            Buffer.from('\r\n--' + boundary + '--\r\n')
          ]);

          const options = {
            hostname: 'nyc.cloud.appwrite.io',
            port: 443,
            path: '/v1/functions/super-site/deployments',
            method: 'POST',
            headers: {
              'Content-Type': 'multipart/form-data; boundary=' + boundary,
              'Content-Length': bodyBuffer.length,
              'X-Appwrite-Project': process.env.APPWRITE_PROJECT_ID,
              'X-Appwrite-Key': process.env.APPWRITE_API_KEY
            }
          };

          return new Promise((resolve, reject) => {
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                console.log('Deploy Status:', res.statusCode);
                if (res.statusCode >= 200 && res.statusCode < 300) {
                  console.log('‚úÖ Enhanced Tech-Lead Orchestrator deployed successfully!');
                  console.log('üåê Main Dashboard: https://super.appwrite.network');
                  console.log('üì± Mobile Interface: https://super.appwrite.network/mobile.html');
                  console.log('üìä Test Results: https://super.appwrite.network/test-results.html');
                  resolve(data);
                } else {
                  console.log('‚ùå Deployment failed:', data);
                  reject(new Error(`Deploy failed: ${res.statusCode}`));
                }
              });
            });
            
            req.on('error', reject);
            req.write(bodyBuffer);
            req.end();
          });
        }

        deploy().catch(error => {
          console.error('‚ùå Deployment error:', error.message);
          process.exit(1);
        });
        EOF
        
        echo "üåê Deploying to Appwrite Sites..."
        node deploy.cjs