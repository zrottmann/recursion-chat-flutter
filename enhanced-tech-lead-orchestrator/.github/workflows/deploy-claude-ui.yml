name: Deploy Claude Code UI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'claude-remote-ui.html'
      - '.github/workflows/deploy-claude-ui.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: echo "No additional dependencies needed for direct deployment"
        
    - name: Deploy Claude Code UI
      env:
        APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      run: |
        echo "üöÄ Deploying Claude Code UI to super.appwrite.network (v2.4 - API key fixed)..."
        
        # Copy the enhanced UI as index.html
        cp claude-remote-ui.html index.html
        
        # Create package.json for deployment
        cat > package.json << 'EOF'
        {
          "name": "claude-code-ui",
          "version": "2.0.0",
          "description": "Claude Code UI from masx200/claudecodeui",
          "main": "index.html",
          "scripts": {
            "build": "echo 'Static site ready - no build needed'",
            "start": "echo 'Static site deployment'"
          }
        }
        EOF
        
        # Create deployment archive
        tar -czf claude-ui.tar.gz index.html package.json
        
        # Create deployment script using Functions API approach
        cat > deploy.cjs << 'EOF'
        const https = require('https');
        const fs = require('fs');
        
        console.log('üì§ Deploying to super.appwrite.network...');
        
        // Use Functions API with tar.gz approach that works
        const fileData = fs.readFileSync('claude-ui.tar.gz');
        const boundary = '----WebKitFormBoundary' + Date.now();
        
        let body = '';
        body += '--' + boundary + '\r\n';
        body += 'Content-Disposition: form-data; name="entrypoint"\r\n\r\n';
        body += 'index.html\r\n';
        body += '--' + boundary + '\r\n';
        body += 'Content-Disposition: form-data; name="activate"\r\n\r\n';
        body += 'true\r\n';
        body += '--' + boundary + '\r\n';
        body += 'Content-Disposition: form-data; name="code"; filename="claude-ui.tar.gz"\r\n';
        body += 'Content-Type: application/gzip\r\n\r\n';
        
        const bodyBuffer = Buffer.concat([
          Buffer.from(body),
          fileData,
          Buffer.from('\r\n--' + boundary + '--\r\n')
        ]);
        
        const options = {
          hostname: 'nyc.cloud.appwrite.io',
          path: '/v1/functions/super/deployments',
          method: 'POST',
          headers: {
            'Content-Type': 'multipart/form-data; boundary=' + boundary,
            'Content-Length': bodyBuffer.length,
            'X-Appwrite-Project': '68a4e3da0022f3e129d0',
            'X-Appwrite-Key': process.env.APPWRITE_API_KEY
          }
        };
        
        const req = https.request(options, (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => {
            console.log('Status:', res.statusCode);
            
            if (res.statusCode === 201 || res.statusCode === 200 || res.statusCode === 202) {
              const result = JSON.parse(data);
              if (res.statusCode === 202) {
                console.log('‚úÖ Claude Code UI deployment accepted and processing...');
                console.log('üìã Deployment ID:', result.$id);
                console.log('‚è≥ Status: Processing deployment...');
              } else {
                console.log('‚úÖ Claude Code UI deployed successfully!');
              }
              console.log('üåê Live at: https://super.appwrite.network');
              console.log('');
              console.log('üéØ Features now live:');
              console.log('  ‚Ä¢ Interactive Chat Interface with Claude Code');
              console.log('  ‚Ä¢ File Explorer and Project Management');
              console.log('  ‚Ä¢ Session Save/Load System');
              console.log('  ‚Ä¢ Mobile-Responsive PWA Design');
              console.log('  ‚Ä¢ Real-time WebSocket Communication');
              console.log('  ‚Ä¢ Modern React UI with Tailwind CSS');
              console.log('');
              console.log('üéâ Claude Code UI from github.com/masx200/claudecodeui is now LIVE!');
            } else {
              console.log('‚ùå Deployment failed:', data.substring(0, 200));
              process.exit(1);
            }
          });
        });
        
        req.on('error', e => {
          console.error('‚ùå Request error:', e.message);
          process.exit(1);
        });
        
        req.write(bodyBuffer);
        req.end();
        EOF
        
        # Execute deployment
        node deploy.cjs