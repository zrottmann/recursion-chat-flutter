name: Deploy Claude Code Remote Chat to Appwrite

on:
  push:
    branches: [ main, master ]
    paths:
      - 'claude-chat.html'
      - 'chat-index.html'
      - 'index.html'
      - 'package.json'
      - 'appwrite-functions/claude-code-bridge/**'
      - '.github/workflows/deploy-appwrite-chat.yml'
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install form-data
        
    - name: Prepare deployment files
      run: |
        # Use the new enhanced chat interface
        cp claude-chat.html index.html
        
        # Ensure we have package.json
        if [ ! -f package.json ]; then
          echo '{"name":"claude-code-ui-chat","version":"1.0.0","description":"Claude Code UI Real-time Chat"}' > package.json
        fi
        
        # Create deployment archive
        tar -czf chat-deployment.tar.gz index.html package.json
        
        echo "üì¶ Deployment package created"
        ls -la *.tar.gz
        
    - name: Deploy to Appwrite Sites
      env:
        APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
        APPWRITE_PROJECT_ID: ${{ secrets.APPWRITE_PROJECT_ID }}
        APPWRITE_SITE_ID: ${{ secrets.APPWRITE_SITE_ID }}
      run: |
        cat > deploy.cjs << 'EOF'
        const https = require('https');
        const fs = require('fs');
        const FormData = require('form-data');

        console.log('üöÄ Deploying Claude Code Remote Chat...');
        console.log('üìç Site ID:', process.env.APPWRITE_SITE_ID);
        console.log('üèóÔ∏è  Project:', process.env.APPWRITE_PROJECT_ID);

        const form = new FormData();
        form.append('code', fs.createReadStream('chat-deployment.tar.gz'));
        form.append('activate', 'true');

        const options = {
          hostname: 'nyc.cloud.appwrite.io',
          path: `/v1/sites/${process.env.APPWRITE_SITE_ID}/deployments`,
          method: 'POST',
          headers: {
            'X-Appwrite-Project': process.env.APPWRITE_PROJECT_ID,
            'X-Appwrite-Key': process.env.APPWRITE_API_KEY,
            ...form.getHeaders()
          }
        };

        const req = https.request(options, (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => {
            console.log('Response Status:', res.statusCode);
            
            if (res.statusCode === 201 || res.statusCode === 200) {
              console.log('‚úÖ Deployment successful!');
              console.log('üì± Chat Interface: https://chat.appwrite.network');
              
              try {
                const result = JSON.parse(data);
                console.log('üìã Deployment ID:', result.$id);
              } catch (e) {
                console.log('üìã Deployment completed successfully');
              }
            } else {
              console.log('‚ùå Deployment failed');
              console.log('Response:', data);
              process.exit(1);
            }
          });
        });

        req.on('error', (error) => {
          console.error('‚ùå Request failed:', error.message);
          process.exit(1);
        });

        form.pipe(req);
        EOF
        
        node deploy.cjs
        
    - name: Deployment Summary
      if: success()
      run: |
        echo "üéâ Claude Code Remote Chat deployed successfully!"
        echo "üì± Mobile Chat URL: https://super.appwrite.network"
        echo ""
        echo "‚ú® Features deployed:"
        echo "  ‚Ä¢ Real-time chat with Appwrite integration"
        echo "  ‚Ä¢ AI-powered responses via Grok API"
        echo "  ‚Ä¢ Command execution bridge for development tasks"
        echo "  ‚Ä¢ Mobile-optimized responsive design"
        echo "  ‚Ä¢ Live connection status and typing indicators"
        echo "  ‚Ä¢ Enhanced security with command sanitization"
        echo "  ‚Ä¢ File operations and git integration"
        echo ""
        echo "üöÄ Claude Code UI Chat is now live with full real-time capabilities!"