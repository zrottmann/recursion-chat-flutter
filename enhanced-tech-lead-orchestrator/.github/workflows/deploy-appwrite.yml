name: Deploy to Appwrite Sites

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'server.js'
      - '*.html'
      - '.github/workflows/deploy-appwrite.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
        
    - name: Build for deployment
      run: npm run sites:build
        
    - name: Create deployment package
      run: tar -czf deploy.tar.gz index.html *.html src/ package.json server.js
        
    - name: Deploy to Appwrite Sites
      env:
        APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
        APPWRITE_PROJECT_ID: 68a4e3da0022f3e129d0
        APPWRITE_ENDPOINT: https://nyc.cloud.appwrite.io/v1
      run: |
        
        # Create deployment script
        cat > deploy.cjs << 'EOF'
        const https = require('https');
        const fs = require('fs');
        const path = require('path');
        
        const projectId = process.env.APPWRITE_PROJECT_ID;
        const apiKey = process.env.APPWRITE_API_KEY;
        const endpoint = process.env.APPWRITE_ENDPOINT || 'https://nyc.cloud.appwrite.io/v1';
        
        // Site configuration
        const siteId = 'orchestrator';
        const siteDomain = 'orchestrator.appwrite.network';
        
        async function deploySite() {
          console.log(`Deploying to ${siteDomain}...`);
          
          // Read the deployment archive
          const deployArchive = fs.readFileSync('deploy.tar.gz');
          
          const options = {
            hostname: endpoint.replace('https://', '').replace('/v1', ''),
            port: 443,
            path: `/v1/projects/${projectId}/sites/${siteId}/deployments`,
            method: 'POST',
            headers: {
              'Content-Type': 'application/octet-stream',
              'X-Appwrite-Project': projectId,
              'X-Appwrite-Key': apiKey,
              'Content-Length': deployArchive.length
            }
          };
          
          return new Promise((resolve, reject) => {
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', (chunk) => { data += chunk; });
              res.on('end', () => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                  console.log('Deployment successful!');
                  console.log(`Site available at: https://${siteDomain}`);
                  resolve(data);
                } else {
                  console.error(`Deployment failed with status ${res.statusCode}`);
                  console.error(data);
                  reject(new Error(data));
                }
              });
            });
            
            req.on('error', (error) => {
              console.error('Deployment error:', error);
              reject(error);
            });
            
            req.write(deployArchive);
            req.end();
          });
        }
        
        // Execute deployment
        deploySite().catch(error => {
          console.error('Deployment failed:', error);
          process.exit(1);
        });
        EOF
        
        # Run deployment
        node deploy.cjs
