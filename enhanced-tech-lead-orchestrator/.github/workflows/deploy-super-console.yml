name: Deploy Super Console to Appwrite

on:
  push:
    branches: [ main, master ]
    paths:
      - 'enhanced-tech-lead-orchestrator/super-console/**'
      - 'enhanced-tech-lead-orchestrator/.github/workflows/deploy-super-console.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (ignore cache)'
        required: false
        default: 'false'

jobs:
  deploy-super-console:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          cd enhanced-tech-lead-orchestrator/super-console
          npm install --legacy-peer-deps
          
      - name: Install form-data for deployment
        run: |
          npm install form-data

      - name: Build Super Console
        run: |
          cd enhanced-tech-lead-orchestrator/super-console
          npm run build

      - name: Create Deployment Archive
        run: |
          cd enhanced-tech-lead-orchestrator/super-console
          tar -czf super-console-deployment.tar.gz dist/ package.json
          ls -la super-console-deployment.tar.gz

      - name: Deploy to Appwrite Sites
        env:
          APPWRITE_API_KEY: ${{ secrets.SUPER_CONSOLE_APPWRITE_API_KEY }}
          APPWRITE_PROJECT_ID: ${{ secrets.SUPER_CONSOLE_PROJECT_ID }}
          APPWRITE_SITE_ID: ${{ secrets.SUPER_CONSOLE_SITE_ID }}
        run: |
          cd enhanced-tech-lead-orchestrator/super-console
          cat > deploy.js << 'EOF'
          const https = require('https');
          const fs = require('fs');

          console.log('🚀 Deploying Super Console to Appwrite Sites...');
          console.log('📦 Project:', process.env.APPWRITE_PROJECT_ID);
          console.log('🌐 Site:', process.env.APPWRITE_SITE_ID);

          const FormData = require('form-data');
          const form = new FormData();

          form.append('code', fs.createReadStream('super-console-deployment.tar.gz'));
          form.append('activate', 'true');

          const options = {
            hostname: 'nyc.cloud.appwrite.io',
            path: `/v1/sites/${process.env.APPWRITE_SITE_ID}/deployments`,
            method: 'POST',
            headers: {
              'X-Appwrite-Project': process.env.APPWRITE_PROJECT_ID,
              'X-Appwrite-Key': process.env.APPWRITE_API_KEY,
              ...form.getHeaders()
            }
          };

          const req = https.request(options, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
              console.log('Status:', res.statusCode);
              
              if (res.statusCode === 201 || res.statusCode === 200) {
                const result = JSON.parse(data);
                console.log('✅ Super Console deployed successfully!');
                console.log('📋 Deployment ID:', result.$id);
                console.log('🌐 Super Console will be available at: https://super.appwrite.network');
                console.log('');
                console.log('🎉 Runtime timeout issue resolved:');
                console.log('  • Super Console now loads instantly');
                console.log('  • Interactive terminal interface');
                console.log('  • Full debugging and analysis tools');
                console.log('  • Mobile-responsive design');
              } else if (res.statusCode === 202) {
                console.log('⏳ Deployment accepted and processing...');
                console.log('🔄 Super Console will be available shortly');
                const result = JSON.parse(data);
                console.log('📋 Deployment ID:', result.$id);
              } else {
                console.log('❌ Deployment failed');
                console.log('Response:', data);
                process.exit(1);
              }
            });
          });

          req.on('error', e => {
            console.log('❌ Deploy error:', e.message);
            process.exit(1);
          });

          form.pipe(req);
          EOF

          node deploy.js

      - name: Verify Deployment
        run: |
          echo "🔍 Waiting for deployment to propagate..."
          sleep 30
          
          # Test if Super Console is accessible
          echo "🧪 Testing Super Console availability..."
          curl -I https://super.appwrite.network || echo "⚠️ Site may still be propagating"
          
          echo "✅ Super Console deployment workflow completed!"
          echo "🌐 Access Super Console at: https://super.appwrite.network"