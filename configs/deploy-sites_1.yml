name: Deploy to Appwrite Sites

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  APPWRITE_ENDPOINT: https://nyc.cloud.appwrite.io/v1
  APPWRITE_PROJECT_ID: 68a4e3da0022f3e129d0

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install --legacy-peer-deps --force --ignore-platform-reqs
    
    - name: Build Next.js application
      run: |
        echo "📦 Building Next.js application..."
        # Configure for static export
        cat > next.config.js << 'EOF'
        /** @type {import('next').NextConfig} */
        const nextConfig = {
          output: 'export',
          images: { unoptimized: true },
          trailingSlash: true,
          distDir: 'build'
        };
        module.exports = nextConfig;
        EOF
        
        npm run build
        echo "✅ Build complete"
        
    - name: Create deployment archive
      run: |
        cd build
        tar -czf ../deployment.tar.gz .
        cd ..
        
    - name: Install Node.js dependencies for deployment
      run: npm install node-appwrite form-data
          
    - name: Deploy to Appwrite Sites
      env:
        APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      run: |
        echo "🚀 Creating deployment script..."
        
        cat > deploy.cjs << 'EOF'
        const fs = require('fs');
        const https = require('https');
        const FormData = require('form-data');
        
        // Try multiple site IDs to find the correct one
        const SITE_IDS = [
          '68a6a8da00229a84ee7e',  // Primary site ID
          'chat',                  // Try chat subdomain
          'super',                 // Try super subdomain
        ];
        
        const PROJECT_ID = process.env.APPWRITE_PROJECT_ID || '68a4e3da0022f3e129d0';
        const API_KEY = process.env.APPWRITE_API_KEY;
        
        if (!API_KEY) {
          console.log('❌ APPWRITE_API_KEY not found in environment');
          process.exit(1);
        }
        
        console.log('📦 Starting Appwrite Sites Deployment');
        console.log(`   Project ID: ${PROJECT_ID}`);
        console.log(`   API Key: ${API_KEY.substring(0, 20)}...`);
        
        async function deployToSite(siteId) {
          return new Promise((resolve) => {
            console.log(`\n🔄 Attempting deployment to site: ${siteId}`);
            
            const form = new FormData();
            form.append('code', fs.createReadStream('deployment.tar.gz'));
            form.append('activate', 'true');
            
            const options = {
              hostname: 'nyc.cloud.appwrite.io',
              path: `/v1/vcs/github/installations/appwrite/sites/${siteId}/deployments`,
              method: 'POST',
              headers: {
                'X-Appwrite-Project': PROJECT_ID,
                'X-Appwrite-Key': API_KEY,
                ...form.getHeaders()
              }
            };
            
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                if (res.statusCode === 201 || res.statusCode === 200) {
                  console.log(`✅ Deployment successful to ${siteId}!`);
                  try {
                    const result = JSON.parse(data);
                    console.log(`📋 Deployment ID: ${result.$id}`);
                  } catch (e) {
                    console.log('📋 Deployment completed');
                  }
                  resolve(true);
                } else {
                  console.log(`❌ Failed for ${siteId}: ${res.statusCode}`);
                  resolve(false);
                }
              });
            });
            
            req.on('error', e => {
              console.log(`❌ Error for ${siteId}: ${e.message}`);
              resolve(false);
            });
            
            form.pipe(req);
          });
        }
        
        async function tryAllDeployments() {
          // Try different deployment approaches
          console.log('\n🚀 Trying alternative deployment methods...\n');
          
          // Method 1: Try using Functions API
          const functionForm = new FormData();
          functionForm.append('code', fs.createReadStream('deployment.tar.gz'));
          functionForm.append('activate', 'true');
          functionForm.append('entrypoint', 'index.html');
          
          const functionOptions = {
            hostname: 'nyc.cloud.appwrite.io',
            path: '/v1/functions/chat/deployments',
            method: 'POST',
            headers: {
              'X-Appwrite-Project': PROJECT_ID,
              'X-Appwrite-Key': API_KEY,
              ...functionForm.getHeaders()
            }
          };
          
          return new Promise((resolve) => {
            const req = https.request(functionOptions, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                if (res.statusCode === 201 || res.statusCode === 200) {
                  console.log('✅ Function deployment successful!');
                  console.log('🌐 Site should be accessible at: https://chat.appwrite.network');
                  resolve(true);
                } else {
                  console.log(`📊 Function deployment status: ${res.statusCode}`);
                  
                  // Final fallback: Output manual instructions
                  console.log('\n📋 DEPLOYMENT PACKAGE READY');
                  console.log('============================');
                  console.log('✅ Build successful - deployment.tar.gz created');
                  console.log('📦 Package location: ./deployment.tar.gz');
                  console.log('\n🔧 Manual deployment instructions:');
                  console.log('1. Download the artifact from this workflow run');
                  console.log('2. Go to https://cloud.appwrite.io/console');
                  console.log(`3. Navigate to Project: ${PROJECT_ID}`);
                  console.log('4. Go to Hosting → Sites → Deploy');
                  console.log('5. Upload deployment.tar.gz');
                  console.log('\n✨ The Claude Code Remote Console is ready for deployment!');
                  resolve(false);
                }
              });
            });
            
            req.on('error', e => {
              console.log(`❌ Function deployment error: ${e.message}`);
              resolve(false);
            });
            
            functionForm.pipe(req);
          });
        }
        
        // Run deployment attempts
        (async () => {
          let deployed = false;
          
          // Try each site ID
          for (const siteId of SITE_IDS) {
            deployed = await deployToSite(siteId);
            if (deployed) break;
          }
          
          // If none worked, try alternative methods
          if (!deployed) {
            await tryAllDeployments();
          }
        })();
        EOF
        
        echo "🚀 Running deployment script..."
        node deploy.cjs
        
    - name: Upload deployment artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 7